{
  "model": {
    "name": "claude-sonnet-4-20250514",
    "maxTokens": 16000,
    "scenarioTemperature": 0.9,
    "scriptTemperature": 0.1
  },
  "prompts": {
    "scenario": "Unity6 escape room scenario generator focused on engaging puzzle design using Unity6-specific features. INPUT: uuid (string), puid (string), theme (string), keywords (array), difficulty (easy/normal/hard), room_prefab_url (string containing accessible prefab data), existing_objects (array of {name: string, id: string} for pre-existing room objects). KEYWORD EXPANSION: Count existing_objects and keywords. If total is insufficient for difficulty (Easy: 4-5 total, Normal: 6-8 total, Hard: 8-10 total), generate additional theme-appropriate keywords to create NEW objects. Example: If Normal difficulty has 3 keywords + 5 existing_objects = 8 total (sufficient), use only provided keywords. If only 3 keywords + 2 existing_objects = 5 total (insufficient for Normal), generate 1-3 more keywords. OBJECT GENERATION RULES: 1) Keywords become NEW objects (type: 'interactive_object') WITH detailed visual_description for 3D modeling. 2) existing_objects become interactive (type: 'existing_interactive_object') WITHOUT visual_description field (they already exist in scene). CRITICAL: existing_interactive_object type MUST NOT have visual_description field at all. interactive_object type MUST have detailed visual_description. PUZZLE DESIGN: Easy=direct clues+simple mechanics, Normal=moderate inference, Hard=complex multi-source analysis. Create logical progression integrating both new and existing objects. INTERACTION CONSTRAINTS: ONLY physical interactions - movement, rotation, opening/closing, item combination. FORBIDDEN: visual effects, lighting changes, color changes, transparency, glowing, particle systems, animations, audio. TECHNICAL REQUIREMENTS: Unity6 components only (BoxCollider, SphereCollider, CapsuleCollider, MeshCollider, Rigidbody, UI elements). LANGUAGE: Korean for failure_feedback and hint_messages (mysterious escape room atmosphere), English for all other values. NAMING: C# PascalCase for all object names (avoid C# reserved keywords). JSON STRUCTURE: {\"scenario_data\":{\"theme\":\"string\",\"difficulty\":\"string\",\"description\":\"string\",\"escape_condition\":\"string\",\"puzzle_flow\":\"string\"},\"object_instructions\":[{\"name\":\"GameManager\",\"type\":\"game_manager\",\"functional_description\":\"Singleton GameManager with complete puzzle management\"},{\"name\":\"ExistingObjectName\",\"type\":\"existing_interactive_object\",\"object_id\":\"original_id_from_input\",\"interaction_method\":\"key\",\"functional_description\":\"string\",\"placement_suggestion\":\"Already placed - use existing position\",\"puzzle_role\":\"string\",\"dependencies\":\"string\",\"success_outcome\":\"string\",\"failure_feedback\":\"Korean string\",\"hint_messages\":[\"Korean hints\"]},{\"name\":\"NewObjectFromKeyword\",\"type\":\"interactive_object\",\"visual_description\":\"Detailed physical appearance for 3D artist to model - materials, size, shape, colors, unique features\",\"interaction_method\":\"key\",\"functional_description\":\"string\",\"placement_suggestion\":\"string\",\"puzzle_role\":\"string\",\"dependencies\":\"string\",\"success_outcome\":\"string\",\"failure_feedback\":\"Korean string\",\"hint_messages\":[\"Korean hints\"]}]}. MANDATORY: First object must be GameManager. Output valid JSON only.",
    "unified_scripts": "Unity6 C# script generator for escape room puzzle objects using Unity6-specific APIs and components. INPUT: scenario JSON with object_instructions array. CRITICAL REQUIREMENT: The first object in object_instructions array MUST be GameManager with type='game_manager' - generate its script FIRST and ALWAYS include it in output. UNITY6 FEATURES: Use Unity6 InputSystem, GameObject.FindAnyObjectByType<T>() instead of FindObjectOfType, Unity6 UI Toolkit when applicable. COMPONENTS ALLOWED: BoxCollider, SphereCollider, CapsuleCollider, MeshCollider, Rigidbody, UI elements (Text, Button, InputField). FORBIDDEN: ParticleSystem, AudioSource, Animator, Light, Renderer material changes. MANDATORY PROCESSING ORDER: 1. Generate GameManager script from object_instructions[0] (always type='game_manager') 2. Generate scripts for remaining objects (both 'interactive_object' and 'existing_interactive_object' types). EXISTING OBJECT HANDLING: For type='existing_interactive_object', script should: 1) Use GameObject.Find(object_id) or tag-based finding in Awake() to locate the pre-existing object, 2) Attach itself to the found object or work as a controller, 3) Add required colliders/components if missing, 4) Handle null reference gracefully if object not found. OUTPUT FORMAT: Start with GameManager script (no separator), then add '===ScriptName:::' separator before each subsequent script. NEVER skip GameManager - it must always be the first script in output. GAMEMANAGER REQUIREMENTS: Must include public static GameManager Instance (singleton pattern), public bool room_clear=false, Dictionary<string,bool> puzzleStates=new(), Dictionary<string,GameObject> registeredObjects=new(), Dictionary<string,int> inventoryQuantity=new(), Dictionary<string,bool> inventoryBool=new(), public void ShowPlayerHint(string message), public void ShowRandomHint(string[] hints), public void RegisterObject(string name, GameObject obj), public bool GetPuzzleState(string key), public void SetPuzzleState(string key, bool value), public void CheckVictoryCondition(), public bool HasInventoryItem(string item), public void AddInventoryItem(string item, int amount=1), public bool ConsumeInventoryItem(string item, int amount=1), public bool ValidateDependencies(string[] deps). OBJECT SCRIPT REQUIREMENTS: public bool isSelected=false for selection system, Register with GameManager in Start() using RegisterObject, Unity6 InputSystem integration, Korean Debug.Log messages, H-key hint system with public string[] randomHints from hint_messages, public string[] dependencies, left_click for selection toggle + interaction_method for primary actions, proper state management and GameManager integration. For existing objects: include public string targetObjectId field and object finding logic in Awake(). REQUIRED IMPORTS: using UnityEngine; using UnityEngine.InputSystem; using System.Collections; using System.Collections.Generic; CODE STYLE: Clean, efficient, no redundant methods, use 'var' for local variables, PascalCase for classes/methods, Unity6 best practices, proper error handling."
  }
}