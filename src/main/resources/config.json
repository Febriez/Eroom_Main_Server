{
  "model": {
    "name": "claude-sonnet-4-20250514",
    "maxTokens": 16000,
    "scenarioTemperature": 0.9,
    "scriptTemperature": 0.1
  },
  "localModelServers": [
    "192.168.1.202:8000",
    "192.168.1.201:8000"
  ],
  "prompts": {
    "scenario": "Unity6 escape room scenario generator. Create escape room with theme and keywords. OUTPUT JSON ONLY.\n\nCRITICAL RULES:\n1. LANGUAGE: All object names, descriptions, and logic in ENGLISH. Only monologue_messages in Korean.\n2. KEYWORDS: Transform user keywords to fit theme (e.g., 'clock'‚Üí'VictorianClock' for victoria theme)\n3. EXIT MECHANISM: Choose from 'key', 'code', 'logic_unlock'\n4. EXISTING OBJECTS: User MUST provide ExitDoor in existing_objects. If missing, throw error.\n5. MODEL GENERATION: Check is_free_modeling flag\n   - If true: use simple_visual_description (ONLY base object name, NO adjectives)\n     Examples: \"pencil\" (not \"golden old pencil\"), \"key\" (not \"dark shiny key\"), \"clock\" (not \"antique clock\")\n   - If false: use visual_description (detailed 3D model description)\n6. FREE MODEL DESCRIPTIONS: For simple_visual_description, remove ALL adjectives and modifiers\n   - \"shiny golden ancient key\" ‚Üí \"key\"\n   - \"old dusty leather-bound book\" ‚Üí \"book\"\n   - \"ornate crystal vase\" ‚Üí \"vase\"\n   - \"mysterious glowing orb\" ‚Üí \"orb\"\n\n‚ö†Ô∏è MANDATORY KEYWORD COUNTS:\n- Easy: EXACTLY 3-5 total keywords ‚Üí 3-5 new objects\n- Normal: EXACTLY 6-7 total keywords ‚Üí 6-7 new objects\n- Hard: EXACTLY 8-9 total keywords ‚Üí 8-9 new objects\n\nüî¥ CRITICAL OBJECT CREATION RULES:\n1. GameManager is NOT a keyword object (type: \"game_manager\")\n2. Existing objects are NOT keyword objects (type: \"existing_interactive_object\")\n3. ONLY count objects with type: \"interactive_object\"\n4. Each keyword (user + expanded) = ONE object with type: \"interactive_object\"\n5. keyword_count.total MUST equal number of type:\"interactive_object\" objects\n\nEXAMPLE for Hard with 3 user keywords:\nUser keywords: ['clock', 'mirror', 'box'] = 3\nHard needs 8-9 total ‚Üí expand 5-6 more keywords\nExpanded: ['candle', 'book', 'key', 'vase', 'statue'] = 5\nTotal: 8 keywords ‚Üí Create EXACTLY 8 objects with type:\"interactive_object\"\n\nOBJECT TYPES:\n- GameManager: type:\"game_manager\" (NOT counted)\n- Existing objects: type:\"existing_interactive_object\" (NOT counted)\n- New keyword objects: type:\"interactive_object\" (COUNTED)\n\nEXISTING OBJECTS RULES:\n- Use ALL provided existing_objects as-is\n- 30% are puzzles (including ExitDoor), 70% are monologue\n- Do NOT create visual descriptions for existing objects\n\nNEW KEYWORD OBJECTS RULES:\n- ALL have type:\"interactive_object\"\n- If is_free_modeling=true: use simple_visual_description (ONLY base noun: \"box\", \"candle\", \"mirror\")\n- If is_free_modeling=false: use visual_description (full detailed description)\n- ALL have interactive_description (puzzles)\n- Total count MUST match keyword_count.total\n\nJSON FORMAT:\n{\n  \"scenario_data\": {\n    \"theme\": \"string\",\n    \"difficulty\": \"easy|normal|hard\",\n    \"description\": \"detailed room description\",\n    \"escape_condition\": \"how to escape\",\n    \"puzzle_flow\": \"step by step puzzle solution\",\n    \"exit_mechanism\": \"key|code|logic_unlock\",\n    \"keyword_count\": {\"user\": N, \"expanded\": M, \"total\": N+M},\n    \"is_free_modeling\": true|false\n  },\n  \"object_instructions\": [\n    {\n      \"name\": \"GameManager\",\n      \"type\": \"game_manager\"  // ‚Üê NOT counted in keywords\n    },\n    // Existing objects (type: \"existing_interactive_object\") - NOT counted\n    {\n      \"name\": \"ExitDoor\",\n      \"id\": \"exitdoor_01\",\n      \"type\": \"existing_interactive_object\",\n      \"interactive_description\": \"...\"\n    },\n    // New keyword objects (type: \"interactive_object\") - COUNTED\n    // For is_free_modeling=true:\n    {\n      \"name\": \"VictorianClock\",\n      \"type\": \"interactive_object\",\n      \"keyword\": \"clock\",\n      \"simple_visual_description\": \"clock\",  // ‚Üê ONLY base object name, NO adjectives\n      \"interactive_description\": \"...\"\n    },\n    // More examples for free modeling:\n    // \"OrnateGoldenKey\" ‚Üí simple_visual_description: \"key\"\n    // \"AncientDustyBook\" ‚Üí simple_visual_description: \"book\"\n    // \"CrystalVase\" ‚Üí simple_visual_description: \"vase\"\n    // For is_free_modeling=false:\n    {\n      \"name\": \"VictorianClock\",\n      \"type\": \"interactive_object\",\n      \"keyword\": \"clock\",\n      \"visual_description\": \"An ornate Victorian-era grandfather clock...\",  // ‚Üê detailed for paid models\n      \"interactive_description\": \"...\"\n    }\n    // ... more objects, total type:\"interactive_object\" = keyword_count.total\n  ],\n  \"model_scales\": {}\n}",
    "unified_scripts": "Generate Unity6 C# scripts using NEW INPUT SYSTEM. Scripts must compile immediately.\n\n‚ö†Ô∏è CRITICAL: Do NOT use interfaces. Do NOT inherit from IInteractable or any interface.\n\nIMPORTANT:\n- Classes inherit ONLY from MonoBehaviour\n- Use GameManager.Instance for state management\n- Use GameEventManager.Instance ONLY for: ShowExitDoorKeyPad(), CloseExitDoorKeyPad(), ExitComplete()\n- All Debug.Log messages in Korean, everything else in English\n\nGAMEMANAGER TEMPLATE:\npublic class GameManager : MonoBehaviour {  // ‚Üê NO interfaces\n    public static GameManager Instance;\n    private Dictionary<string, GameObject> registeredObjects = new Dictionary<string, GameObject>();\n    private Dictionary<string, bool> gameStates = new Dictionary<string, bool>();\n    private List<string> inventory = new List<string>();\n    \n    void Awake() {\n        if (Instance == null) {\n            Instance = this;\n            DontDestroyOnLoad(gameObject);\n        } else {\n            Destroy(gameObject);\n        }\n    }\n    \n    public void RegisterObject(string name, GameObject obj) {\n        registeredObjects[name] = obj;\n    }\n    \n    public bool GetBool(string key) {\n        return gameStates.ContainsKey(key) && gameStates[key];\n    }\n    \n    public void SetBool(string key, bool value) {\n        gameStates[key] = value;\n        Debug.Log($\"{key} ÏÉÅÌÉúÍ∞Ä {value}Î°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.\");\n    }\n    \n    public bool HasItem(string itemName) {\n        return inventory.Contains(itemName);\n    }\n    \n    public void AddItem(string itemName) {\n        if (!inventory.Contains(itemName)) {\n            inventory.Add(itemName);\n            Debug.Log($\"{itemName}ÏùÑ(Î•º) ÌöçÎìùÌñàÏäµÎãàÎã§!\");\n        }\n    }\n}\n\nMONOLOGUE OBJECTS (has monologue_messages array):\npublic class [NAME]C : MonoBehaviour {  // ‚Üê NO interfaces, only MonoBehaviour\n    private string targetId = \"[ID]\";\n    private GameObject target;\n    private GameManager gm;\n    private string[] messages = [COPY_EXACT_MONOLOGUE_MESSAGES_ARRAY];\n    private int lastIndex = -1;\n    \n    void Awake() {\n        target = GameObject.Find(targetId) ?? gameObject;\n        if (target != gameObject) {\n            var comp = target.AddComponent<[NAME]C>();\n            comp.messages = messages;\n            comp.targetId = targetId;\n            Destroy(gameObject);\n        }\n    }\n    \n    void Start() {\n        gm = GameManager.Instance;\n        gm.RegisterObject(\"[NAME]\", gameObject);\n    }\n    \n    void Update() {\n        if (Mouse.current?.leftButton.wasPressedThisFrame ?? false) {\n            var ray = Camera.main.ScreenPointToRay(Mouse.current.position.ReadValue());\n            if (Physics.Raycast(ray, out var hit) && hit.collider.gameObject == gameObject) {\n                int newIndex;\n                do { newIndex = Random.Range(0, messages.Length); } \n                while (newIndex == lastIndex && messages.Length > 1);\n                lastIndex = newIndex;\n                Debug.Log(messages[newIndex]);\n            }\n        }\n    }\n}\n\nINTERACTIVE OBJECTS (has interactive_description):\npublic class [NAME]C : MonoBehaviour {  // ‚Üê NO interfaces\n    // Implement based on interactive_description\n    // Use GameManager for state, GameEventManager for exit\n}\n\nIMPORTANT: \n- NO interface inheritance (no : IInteractable, IClickable, etc.)\n- For monologue objects, COPY the monologue_messages array EXACTLY as provided in JSON.\n- All classes inherit ONLY from MonoBehaviour\n\nOUTPUT: One ```csharp block per object in object_instructions order.",
    "scripts_batch": "Generate Unity6 C# scripts for batch objects. MUST match object count exactly.\n\n‚ö†Ô∏è CRITICAL: Do NOT use interfaces. Do NOT inherit from IInteractable or any interface.\n\nRULES:\n- Classes inherit ONLY from MonoBehaviour (no interfaces)\n- Read each object's interactive_description or monologue_messages\n- Monologue objects: Use the EXACT monologue_messages array provided in JSON\n- Interactive objects: Implement exact logic from interactive_description\n- ExitDoor: Handle exit_mechanism (key/code/logic_unlock)\n- Use GameManager.Instance for states, GameEventManager.Instance for exit functions\n- Object names EXACTLY as provided\n\nFOR ALL CLASSES:\npublic class [NAME]C : MonoBehaviour {  // ‚Üê NO interfaces, only MonoBehaviour\n    // implementation\n}\n\nFOR MONOLOGUE OBJECTS:\nCopy the monologue_messages array EXACTLY. Do NOT create new messages.\nExample: private string[] messages = {\"msg1\", \"msg2\", \"msg3\", ...};\n\nEach script in ```csharp block. Compilable Unity6 code only. NO interface inheritance."
  }
}