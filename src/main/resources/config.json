{
  "model": {
    "name": "claude-sonnet-4-20250514",
    "maxTokens": 8000,
    "scenarioTemperature": 0.9,
    "scriptTemperature": 0.1
  },
  "prompts": {
    "scenario": "Unity6 PC 3D escape room scenario generator. Generate a complete escape room scenario based on the provided theme and keywords. Your response must be valid JSON following this exact structure:\n\n{\n  \"scenario_data\": \"[Brief atmospheric description of the room and story - 2-3 sentences]\",\n  \"keywords\": [\n    {\n      \"name\": \"[object_name]\",\n      \"value\": \"[Detailed 3D model description for AI model generation - include materials, textures, wear, colors, specific visual details]\"\n    }\n  ],\n  \"data\": [\n    {\n      \"name\": \"GameManager\",\n      \"value\": \"[Unity script description for managing game state, timers, puzzle progression, atmospheric effects]\"\n    },\n    {\n      \"name\": \"[object_name]\",\n      \"value\": \"[Unity script description for object behavior, interactions, state changes, puzzle logic]\"\n    }\n  ]\n}\n\nRULES:\n1. 'keywords' array contains 3D model generation prompts - be very detailed about visual appearance\n2. 'data' array contains Unity script behavior descriptions - focus on gameplay mechanics\n3. Include exactly the user-provided keywords in the keywords array\n4. Add 3-6 additional objects to create interesting puzzles\n5. GameManager must always be first in data array\n6. Create interconnected puzzles where objects depend on each other\n7. Ensure escape room has clear progression and win condition\n8. All object names in keywords must match object names in data\n9. Return only valid JSON, no additional text\n\nExample structure:\n{\n  \"scenario_data\": \"You awaken in an abandoned Victorian study filled with dusty books and mysterious artifacts. The air smells of old parchment and something sinister lurks in the shadows.\",\n  \"keywords\": [\n    {\n      \"name\": \"mirror\",\n      \"value\": \"Ornate Victorian mirror with tarnished silver frame, spider web cracks across surface, dark wooden backing with intricate carved roses\"\n    }\n  ],\n  \"data\": [\n    {\n      \"name\": \"GameManager\",\n      \"value\": \"Manages puzzle completion tracking, lighting atmosphere, sound effects, win condition when all puzzles solved\"\n    },\n    {\n      \"name\": \"mirror.cs\",\n      \"value\": \"Interactive mirror that shows reflections of hidden objects when player holds specific items, click to examine closer reveals secret compartment\"\n    }\n  ]\n}",
    "gameManager": "Unity6 GameManager script generator.\\nReq: Complete GameManager.cs with singleton, phase management, object registration, sanity system, atmosphere control, puzzle tracking, auto-register objects, state changes\\nCode: Double quotes for strings, single quotes for chars, Unity6 Input System, proper using statements, public methods for external interactions, private for internal\\nRequired Methods: RegisterObject(string objectName, GameObject obj), NotifyObjectInteraction(string objectName, string action), NotifyObjectStateChange(string objectName, string state), NotifyItemFound(string itemName), phase progression, atmosphere control\\nOutput: Single line C# code only.",
    "bulkObject": "Unity6 multiple object scripts generator.\nReq: Scripts for ALL objects, auto-register with GameManager in Start(), E-key AND mouse click interactions, GameManager integration for state tracking\nCode: Double quotes for strings, single quotes for chars, Unity6 Input System (Keyboard.current.eKey.wasPressedThisFrame, Mouse.current.leftButton.wasPressedThisFrame), include 'using UnityEngine.InputSystem;', avoid name conflicts (use *_Internal for private methods, *_Action for public methods), ALL interaction methods must be public, If use LINQ add import 'using System.Linq;'\nFormat: MINIMAL whitespace - no spaces after semicolons in using statements, no spaces around braces {}, compress variable declarations on single lines where possible, minimize line breaks\nUse: [SerializeField] for inspector fields, GetComponent<>(), collision detection with OnTriggerEnter/Exit, public methods for GameManager calls\nAvoid: UI components, audio systems, rendering/materials, legacy Input class, single quotes for strings, duplicate method names\nOutput: JSON array of objects with 'key' and 'value' properties. Each object contains script name as 'key' and script code as 'value'. Format: [{\"key\": \"ScriptName\", \"value\": \"script code here\"}, ...]. Properly escape all quotes."
  }
}