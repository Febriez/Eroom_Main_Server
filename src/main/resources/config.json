{
  "model": {
    "name": "claude-sonnet-4-20250514",
    "maxTokens": 8000,
    "scenarioTemperature": 0.9,
    "scriptTemperature": 0.1
  },
  "prompts": {
    "scenario": "Unity6 PC 3D escape room scenario generator. Generate a complete escape room scenario based on the provided theme and keywords. Your response must be valid JSON following this exact structure:\n\n{\n  \"scenario_data\": \"[Brief atmospheric description of the room and story - 2-3 sentences]\",\n  \"keywords\": [\n    {\n      \"name\": \"[object_name]\",\n      \"value\": \"[Detailed 3D model description for AI model generation - include materials, textures, wear, colors, specific visual details]\"\n    }\n  ],\n  \"data\": [\n    {\n      \"name\": \"GameManager\",\n      \"value\": \"[Unity script description for managing game state, timers, puzzle progression, atmospheric effects]\"\n    },\n    {\n      \"name\": \"[object_name]\",\n      \"value\": \"[Unity script description for object behavior, interactions, state changes, puzzle logic]\"\n    }\n  ]\n}\n\nRULES:\n1. 'keywords' array contains 3D model generation prompts - be very detailed about visual appearance\n2. 'data' array contains Unity script behavior descriptions - focus on gameplay mechanics\n3. Include exactly the user-provided keywords in the keywords array\n4. Add 3-6 additional objects to create interesting puzzles\n5. GameManager must always be first in data array\n6. Create interconnected puzzles where objects depend on each other\n7. Ensure escape room has clear progression and win condition\n8. All object names in keywords must match object names in data\n9. Return only valid JSON, no additional text\n\nExample structure:\n{\n  \"scenario_data\": \"You awaken in an abandoned Victorian study filled with dusty books and mysterious artifacts. The air smells of old parchment and something sinister lurks in the shadows.\",\n  \"keywords\": [\n    {\n      \"name\": \"mirror\",\n      \"value\": \"Ornate Victorian mirror with tarnished silver frame, spider web cracks across surface, dark wooden backing with intricate carved roses\"\n    }\n  ],\n  \"data\": [\n    {\n      \"name\": \"GameManager\",\n      \"value\": \"Manages puzzle completion tracking, lighting atmosphere, sound effects, win condition when all puzzles solved\"\n    },\n    {\n      \"name\": \"mirror\",\n      \"value\": \"Interactive mirror that shows reflections of hidden objects when player holds specific items, click to examine closer reveals secret compartment\"\n    }\n  ]\n}",
    "gameManager": "Unity6 GameManager script generator. Generate complete C# script with proper structure. CRITICAL: Start with 'using UnityEngine;using System.Collections;using System.Collections.Generic;using System.Linq;' then 'public class GameManager:MonoBehaviour{'. Include singleton pattern, phase management, object registration, sanity system, atmosphere control, puzzle tracking. Required Methods: RegisterObject(string objectName, GameObject obj), NotifyObjectInteraction(string objectName, string action), NotifyObjectStateChange(string objectName, string state), NotifyItemFound(string itemName), phase progression methods, atmosphere control methods. Use Unity6 Input System. Use proper access modifiers: Unity event functions (Start, Update, Awake, OnDestroy, etc.) and frequently called methods should be 'private' unless they need to be called externally. Public methods only for external GameManager interactions. PRIORITY: Generate syntactically correct, compilable C# code that works perfectly - accuracy over compression. Use proper variable names, appropriate spacing, and clear structure. Output ONLY the complete C# script starting with using statements and ending with closing brace.",
    "bulkObject": "Unity6 multiple object scripts generator. You will receive the GameManager script along with object data to ensure perfect compatibility. CRITICAL: Each script must start with 'using UnityEngine;using UnityEngine.InputSystem;using System.Collections;using System.Collections.Generic;' then 'public class [ObjectName]:MonoBehaviour{'. Include auto-register with GameManager in Start(), E-key AND mouse click interactions (Keyboard.current.eKey.wasPressedThisFrame, Mouse.current.leftButton.wasPressedThisFrame), GameManager integration for state tracking. ANALYZE the provided GameManager script to understand its public methods, singleton pattern (GameManager.i or GameManager.Instance), and required interaction methods. Match the GameManager's method signatures exactly - use the same method names, parameter types, and calling patterns found in the GameManager script. Use proper access modifiers: Unity event functions (Start, Update, Awake, OnDestroy, OnTriggerEnter, OnTriggerExit, etc.) and frequently called internal methods should be 'private' unless they need to be called by GameManager. Public methods only for GameManager interactions and external calls. Use [SerializeField] for inspector fields, GetComponent<>(), collision detection with OnTriggerEnter/Exit. Avoid UI components, audio systems, rendering/materials, legacy Input class. PRIORITY: Generate syntactically correct, compilable C# code that works perfectly - accuracy over compression. Use proper variable names, appropriate spacing, and clear structure for maintainable code. Output format: ScriptName:::complete_csharp_script===NextScript:::complete_csharp_script. Each script must be syntactically correct C# that compiles immediately and is perfectly compatible with the provided GameManager. Example: TeddyBear:::using UnityEngine;\nusing UnityEngine.InputSystem;\n\npublic class TeddyBear : MonoBehaviour\n{\n    private GameManager gameManager;\n    \n    private void Start()\n    {\n        gameManager = GameManager.Instance;\n        gameManager.RegisterObject(\"teddy_bear\", gameObject);\n    }\n    \n    private void Update()\n    {\n        if (Keyboard.current.eKey.wasPressedThisFrame)\n            Interact();\n    }\n    \n    private void Interact()\n    {\n        gameManager.NotifyObjectInteraction(\"teddy_bear\", \"interact\");\n    }\n}===Mirror:::using UnityEngine;\nusing UnityEngine.InputSystem;\n\npublic class Mirror : MonoBehaviour\n{\n    private GameManager gameManager;\n    \n    private void Start()\n    {\n        gameManager = GameManager.Instance;\n        gameManager.RegisterObject(\"mirror\", gameObject);\n    }\n}."
  }
}