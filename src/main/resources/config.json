{
  "model": {
    "name": "claude-sonnet-4-20250514",
    "maxTokens": 16000,
    "scenarioTemperature": 0.9,
    "scriptTemperature": 0.1
  },
  "prompts": {
    "scenario": "Unity6 escape room scenario generator. INPUT: uuid, puid, theme, keywords array, difficulty (easy/normal/hard), room_prefab_url, existing_objects (array of {name: string, id: string} for pre-existing room objects). CRITICAL: ExitDoor is ALWAYS in existing_objects and is the FINAL escape mechanism. EXISTING OBJECTS USAGE: Use ONLY 30% of existing_objects for puzzles (including ExitDoor), remaining 70% are SIMPLE MONOLOGUE objects that show random Korean descriptions when clicked. SIMPLE MONOLOGUE OBJECTS: Must have 'monologue_descriptions' array with 10+ varied Korean sentences like: '그냥 평범한 책이다', '먼지가 많이 쌓여있다', '누군가 사용한 흔적이 있다', '별로 특별할 게 없어 보인다', '오래되어 보이지만 아직 쓸만하다', '이상한 냄새가 난다', '만지기가 꺼려진다', '예전엔 비쌌을 것 같다', '주인이 아꼈던 물건인 듯하다', '그저 그런 [물건]이다'. Vary descriptions based on object type. NEW OBJECT RULES: Create from keywords - Easy(4-5), Normal(5-7), Hard(7-9) with visual_description for 3D modeling. IMPORTANT: NEVER create multiple variants of same object type (NO CrystalCandle+ModernCandle+AncientCandle). Each new object must be COMPLETELY DIFFERENT in function and category. Examples: if 'candle' keyword used once, next objects should be completely unrelated like telescope, hourglass, compass, music box, etc. Ensure MAXIMUM DIVERSITY in object types. EXITDOOR MECHANISMS: Choose ONE: a) Password - collect digits/codes, call g.ShowPasswordUI(), b) Key - check g.HI(\"exit_key\"), c) Remote - check g.G(\"exit_unlocked\"). OBJECT TYPES: existing_interactive_object (all existing_objects, NO visual_description, has object_id, either puzzle interaction OR monologue_descriptions), interactive_object (from keywords ONLY, needs visual_description). PUZZLE DESIGN: Create chains using 30% of existing objects leading to ExitDoor unlock. LANGUAGE: Korean for all user-facing text. JSON: {\"scenario_data\":{\"theme\",\"difficulty\",\"description\",\"escape_condition\",\"puzzle_flow\",\"exit_mechanism\":\"password|key|remote\"},\"object_instructions\":[{\"name\":\"GameManager\",\"type\":\"game_manager\",\"functional_description\":\"Manages all objects, ShowPasswordUI() for door, RandomMonologue() for simple objects\"},{objects}],\"model_scales\":{new_only}}. Output JSON only.",
    "unified_scripts": "Generate Unity6 scripts for ALL provided objects. CRITICAL: Generate one script per object in the batch, matching the exact count. Each code block must contain a complete C# script with proper class declaration. HANDLE existing_interactive_object in TWO WAYS: 1) PUZZLE objects (30%): Full interaction logic, 2) SIMPLE MONOLOGUE objects (70%): Show random description from array when clicked. MONOLOGUE object template: ```csharp\npublic class [NAME]C:MonoBehaviour{string tid=\"[ID]\";GameObject t;GameManager g;string[]m={[MONOLOGUES]};void Awake(){t=GameObject.Find(tid)??gameObject;if(t!=gameObject){t.AddComponent<[NAME]C>().m=m;Destroy(gameObject);}}void Start(){g=GameManager.I;g.R(\"[NAME]\",gameObject);}void Update(){if(Mouse.current?.leftButton.wasPressedThisFrame??false){var r=Camera.main.ScreenPointToRay(Mouse.current.position.ReadValue());if(Physics.Raycast(r,out var x)&&x.collider.gameObject==gameObject){g.RM(m);}}}}\n``` ExitDoor SPECIAL: Based on exit_mechanism - 'password':g.ShowPasswordUI(), 'key':g.HI(\"exit_key\"), 'remote':g.G(\"exit_unlocked\"). GameManager MUST include ShowPasswordUI() and RM(string[]monologues) for random monologue display. OUTPUT FORMAT: One code block per script, each clearly separated. COMPRESS: 1-char vars, no spaces/comments.",
    "game_manager_batch": "Generate GameManager for escape room. MUST include: ShowPasswordUI() for ExitDoor password entry, RM(string[]m) method that displays random monologue from array (g.H(m[Random.Range(0,m.Length)])), CheckPassword(string) for password validation, exit mechanism handling. For 'password': track collected codes, validate in CheckPassword. For 'key': check exit_key possession. For 'remote': check exit_unlocked state. Victory: room_clear=true when ExitDoor opened. Handle 30% puzzle objects + 70% monologue objects + new keyword objects. Support ALL interactions: rotation, dial, sequence, combination, lever, temperature, morse, rhythm, book orders, painting puzzles, piano notes, mirror angles, drawer locks, pressure plates, time limits, color patterns. Include Korean debug messages. Required methods: ShowPasswordUI(), RM(string[]), CheckPassword(string), ValidateExit(), R,S,G,V,A,CI,HI,SO,IO,U,GD,SD,RH,C. Ultra-compressed format.",
    "scripts_batch": "Generate scripts for ALL objects in this batch. CRITICAL: Generate EXACTLY the same number of scripts as objects provided, one complete C# script per code block. For each object: READ game_manager_script to understand methods including RM(string[]). For existing_interactive_object: If has monologue_descriptions field, create MONOLOGUE script - user clicks object, call g.RM(monologue_array). If has interaction_method, create PUZZLE script with unique interaction. ExitDoor SPECIAL: Read exit_mechanism. If 'password': call g.ShowPasswordUI(), check dependencies. If 'key': check g.HI(\"exit_key\"), show '열쇠가 필요하다'. If 'remote': check g.G(\"exit_unlocked\"), show '아직 잠겨있다'. NEW OBJECTS from keywords: Create scripts with UNIQUE puzzle types. DIVERSITY RULE: Each new object must have COMPLETELY DIFFERENT interaction type. NO repetition of similar objects (e.g., if one candle exists, no more candles). Examples of diverse objects: telescope (star alignment), hourglass (timing puzzle), compass (direction puzzle), music box (melody puzzle), typewriter (word puzzle), chemistry set (mixing puzzle), projector (slide puzzle), radio (frequency puzzle), abacus (calculation puzzle), sextant (navigation puzzle), metronome (rhythm puzzle), kaleidoscope (pattern puzzle). PUZZLE interactions (max 2 per type per batch): rotation(angles), dial(0-360), sequence(patterns), combination(digits), lever(states), temperature(range), morse(dots/dashes), rhythm(timing), book_order(shelf), painting_slide(grid), piano_notes(melody), mirror_angle(reflection), drawer_lock(code), pressure_plate(weight), timed_sequence(quick), color_match(order), statue_pose(position), light_beam(angle), valve_turn(flow), chess_puzzle(moves). Korean for all user text. OUTPUT: Each script in separate code block with ```csharp marking. Ultra-compressed."
  }
}