{
  "model": {
    "name": "claude-sonnet-4-20250514",
    "maxTokens": 16000,
    "scenarioTemperature": 0.9,
    "scriptTemperature": 0.1
  },
  "prompts": {
    "scenario": "Unity6 escape room scenario generator. Create escape room with theme and keywords. OUTPUT JSON ONLY.\n\nCRITICAL RULES:\n1. LANGUAGE: All object names, descriptions, and logic in ENGLISH. Only monologue_messages in Korean.\n2. KEYWORDS: Transform user keywords to fit theme (e.g., 'clock'→'VictorianClock' for victoria theme)\n3. EXIT MECHANISM: Choose from 'key', 'code', 'logic_unlock'\n4. EXISTING OBJECTS: User MUST provide ExitDoor in existing_objects. If missing, throw error.\n\nKEYWORD LIMITS by difficulty:\n- Easy: 3-5 keywords total\n- Normal: 6-7 keywords total\n- Hard: 8-9 keywords total\n\nOBJECT DISTRIBUTION:\n- 30% of existing_objects are puzzles (MUST include ExitDoor)\n- 70% of existing_objects are monologue objects\n- ALL new keyword objects are puzzles\n\nFOR EACH OBJECT provide either:\n- interactive_description: Detailed puzzle logic for script generation\n- monologue_messages: Array of 15-20 Korean sentences for the object\n\nJSON FORMAT:\n{\n  \"scenario_data\": {\n    \"theme\": \"string\",\n    \"difficulty\": \"easy|normal|hard\",\n    \"description\": \"detailed room description\",\n    \"escape_condition\": \"how to escape\",\n    \"puzzle_flow\": \"step by step puzzle solution\",\n    \"exit_mechanism\": \"key|code|logic_unlock\",\n    \"keyword_count\": {\"user\": N, \"expanded\": M, \"total\": N+M}\n  },\n  \"object_instructions\": [\n    {\n      \"name\": \"GameManager\",\n      \"type\": \"game_manager\"\n    },\n    {\n      \"name\": \"ExitDoor\",\n      \"id\": \"exitdoor_01\",\n      \"type\": \"existing_interactive_object\",\n      \"interactive_description\": \"Final escape door. Mechanism: [exit_mechanism]. If 'key': check GameManager.HasItem('exit_key'). If 'code': show keypad UI. If 'logic_unlock': check GameManager.GetBool('door_unlocked'). On success: call GameEventManager.Instance.ExitComplete()\"\n    },\n    {\n      \"name\": \"Table\",\n      \"id\": \"table_01\",\n      \"type\": \"existing_interactive_object\",\n      \"monologue_messages\": [\n        \"오래된 탁자의 나무결이 세월의 흔적을 말해주는 것 같아요.\",\n        \"누군가 이곳에 앉아 편지를 썼을까요? 잉크 얼룩이 남아있네요.\",\n        \"탁자 다리의 정교한 조각이 빅토리아 시대의 장인정신을 보여줍니다.\",\n        \"서랍 손잡이가 살짝 헐거워진 것 같은데... 오랜 사용의 증거겠죠.\",\n        \"탁자 위의 희미한 원형 자국들... 찻잔이 놓였던 흔적인가 봅니다.\",\n        \"이 탁자에서 얼마나 많은 대화가 오갔을까요?\",\n        \"모서리의 작은 흠집들이 이 가구의 역사를 말해주는 듯합니다.\",\n        \"따뜻한 차 한 잔과 함께 책을 읽기 좋은 탁자네요.\",\n        \"탁자 아래쪽에 희미하게 제작자의 서명이 보입니다.\",\n        \"광택이 바랜 표면이 오히려 고풍스러운 매력을 더해줍니다.\",\n        \"누군가 여기에 일기를 쓰며 하루를 마무리했겠죠.\",\n        \"탁자의 무게감이 든든함과 안정감을 줍니다.\",\n        \"서랍 안에서 나는 삼나무 향이 은은하게 퍼집니다.\",\n        \"이런 가구는 요즘 찾아보기 힘든 진품이에요.\",\n        \"탁자 표면의 나이테가 나무의 오랜 삶을 보여줍니다.\",\n        \"손으로 만져보니 세월이 만든 부드러운 질감이 느껴집니다.\"\n      ]\n    },\n    {\n      \"name\": \"VictorianClock\",\n      \"type\": \"interactive_object\",\n      \"keyword\": \"clock\",\n      \"visual_description\": \"Ornate Victorian wall clock with roman numerals, brass gears visible through glass panel, pendulum swinging\",\n      \"interactive_description\": \"Rotatable clock hands. Player can drag hour/minute hands. Correct time: 3:45. When set correctly: GameManager.SetBool('clock_solved', true) and play tick-tock sound. Shows hint after 3 wrong attempts.\"\n    }\n  ],\n  \"model_scales\": {\n    \"VictorianClock\": 1.5,\n    \"OtherNewObject\": 1.0\n  }\n}",
    "unified_scripts": "Generate Unity6 C# scripts using NEW INPUT SYSTEM. Scripts must compile immediately.\n\nIMPORTANT:\n- Use GameManager.Instance for state management\n- Use GameEventManager.Instance ONLY for: ShowExitDoorKeyPad(), CloseExitDoorKeyPad(), ExitComplete()\n- All Debug.Log messages in Korean, everything else in English\n\nTEMPLATES:\n\n1. MONOLOGUE OBJECTS (has monologue_messages array):\npublic class [NAME]C : MonoBehaviour {\n    private string targetId = \"[ID]\";\n    private GameObject target;\n    private GameManager gm;\n    private string[] messages = [COPY_EXACT_MONOLOGUE_MESSAGES_ARRAY];\n    private int lastIndex = -1;\n    \n    void Awake() {\n        target = GameObject.Find(targetId) ?? gameObject;\n        if (target != gameObject) {\n            var comp = target.AddComponent<[NAME]C>();\n            comp.messages = messages;\n            comp.targetId = targetId;\n            Destroy(gameObject);\n        }\n    }\n    \n    void Start() {\n        gm = GameManager.Instance;\n        gm.RegisterObject(\"[NAME]\", gameObject);\n    }\n    \n    void Update() {\n        if (Mouse.current?.leftButton.wasPressedThisFrame ?? false) {\n            var ray = Camera.main.ScreenPointToRay(Mouse.current.position.ReadValue());\n            if (Physics.Raycast(ray, out var hit) && hit.collider.gameObject == gameObject) {\n                int newIndex;\n                do { newIndex = Random.Range(0, messages.Length); } \n                while (newIndex == lastIndex && messages.Length > 1);\n                lastIndex = newIndex;\n                Debug.Log(messages[newIndex]);\n            }\n        }\n    }\n}\n\n2. INTERACTIVE OBJECTS (has interactive_description):\nImplement based on interactive_description. Use GameManager for state, GameEventManager for exit.\n\nIMPORTANT: For monologue objects, COPY the monologue_messages array EXACTLY as provided in JSON.\n\nOUTPUT: One ```csharp block per object in object_instructions order.",
    "scripts_batch": "Generate Unity6 C# scripts for batch objects. MUST match object count exactly.\n\nRULES:\n- Read each object's interactive_description or monologue_messages\n- Monologue objects: Use the EXACT monologue_messages array provided in JSON\n- Interactive objects: Implement exact logic from interactive_description\n- ExitDoor: Handle exit_mechanism (key/code/logic_unlock)\n- Use GameManager.Instance for states, GameEventManager.Instance for exit functions\n- Object names EXACTLY as provided\n\nFOR MONOLOGUE OBJECTS:\nCopy the monologue_messages array EXACTLY. Do NOT create new messages.\nExample: private string[] messages = {\"msg1\", \"msg2\", \"msg3\", ...};\n\nEach script in ```csharp block. Compilable Unity6 code only."
  }
}